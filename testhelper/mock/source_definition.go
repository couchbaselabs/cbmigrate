// Code generated by MockGen. DO NOT EDIT.
// Source: source_definition.go
//
// Generated by this command:
//
//	mockgen -source=source_definition.go -destination=../../testhelper/mock/source_definition.go -package=mock_test ISource
//

// Package mock_test is a generated GoMock package.
package mock_test

import (
	context "context"
	reflect "reflect"

	common "github.com/couchbaselabs/cbmigrate/internal/common"
	gomock "go.uber.org/mock/gomock"
)

// MockISource is a mock of ISource interface.
type MockISource[Options any] struct {
	ctrl     *gomock.Controller
	recorder *MockISourceMockRecorder[Options]
}

// MockISourceMockRecorder is the mock recorder for MockISource.
type MockISourceMockRecorder[Options any] struct {
	mock *MockISource[Options]
}

// NewMockISource creates a new mock instance.
func NewMockISource[Options any](ctrl *gomock.Controller) *MockISource[Options] {
	mock := &MockISource[Options]{ctrl: ctrl}
	mock.recorder = &MockISourceMockRecorder[Options]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockISource[Options]) EXPECT() *MockISourceMockRecorder[Options] {
	return m.recorder
}

// GetCouchbaseIndexesQuery mocks base method.
func (m *MockISource[Options]) GetCouchbaseIndexesQuery(bucket, scope, collection string) []common.Index {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCouchbaseIndexesQuery", bucket, scope, collection)
	ret0, _ := ret[0].([]common.Index)
	return ret0
}

// GetCouchbaseIndexesQuery indicates an expected call of GetCouchbaseIndexesQuery.
func (mr *MockISourceMockRecorder[Options]) GetCouchbaseIndexesQuery(bucket, scope, collection any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCouchbaseIndexesQuery", reflect.TypeOf((*MockISource[Options])(nil).GetCouchbaseIndexesQuery), bucket, scope, collection)
}

// Init mocks base method.
func (m *MockISource[Options]) Init(opts *Options, documentKey common.IDocumentKey) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init", opts, documentKey)
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init.
func (mr *MockISourceMockRecorder[Options]) Init(opts, documentKey any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockISource[Options])(nil).Init), opts, documentKey)
}

// StreamData mocks base method.
func (m *MockISource[Options]) StreamData(arg0 context.Context, arg1 chan map[string]any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StreamData", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// StreamData indicates an expected call of StreamData.
func (mr *MockISourceMockRecorder[Options]) StreamData(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StreamData", reflect.TypeOf((*MockISource[Options])(nil).StreamData), arg0, arg1)
}
