// Code generated by MockGen. DO NOT EDIT.
// Source: source_definition.go
//
// Generated by this command:
//
//	mockgen -source=source_definition.go -destination=../../testhelper/mock/source_definition.go -package=mock_test ISource
//

// Package mock_test is a generated GoMock package.
package mock_test

import (
	context "context"
	reflect "reflect"

	option "github.com/couchbaselabs/cbmigrate/internal/option"
	gomock "go.uber.org/mock/gomock"
)

// MockISource is a mock of ISource interface.
type MockISource struct {
	ctrl     *gomock.Controller
	recorder *MockISourceMockRecorder
}

// MockISourceMockRecorder is the mock recorder for MockISource.
type MockISourceMockRecorder struct {
	mock *MockISource
}

// NewMockISource creates a new mock instance.
func NewMockISource(ctrl *gomock.Controller) *MockISource {
	mock := &MockISource{ctrl: ctrl}
	mock.recorder = &MockISourceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockISource) EXPECT() *MockISourceMockRecorder {
	return m.recorder
}

// Init mocks base method.
func (m *MockISource) Init(opts *option.Options) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init", opts)
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init.
func (mr *MockISourceMockRecorder) Init(opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockISource)(nil).Init), opts)
}

// StreamData mocks base method.
func (m *MockISource) StreamData(arg0 context.Context, arg1 chan map[string]any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StreamData", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// StreamData indicates an expected call of StreamData.
func (mr *MockISourceMockRecorder) StreamData(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StreamData", reflect.TypeOf((*MockISource)(nil).StreamData), arg0, arg1)
}
