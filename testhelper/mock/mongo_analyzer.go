// Code generated by MockGen. DO NOT EDIT.
// Source: analyzer.go
//
// Generated by this command:
//
//	mockgen -source=analyzer.go -destination=../../testhelper/mock/mongo_analyzer.go -package=mock_test Analyzer
//

// Package mock_test is a generated GoMock package.
package mock_test

import (
	reflect "reflect"

	common "github.com/couchbaselabs/cbmigrate/internal/common"
	mongo "github.com/couchbaselabs/cbmigrate/internal/mongo"
	gomock "go.uber.org/mock/gomock"
)

// MockAnalyzer is a mock of Analyzer interface.
type MockAnalyzer struct {
	ctrl     *gomock.Controller
	recorder *MockAnalyzerMockRecorder
}

// MockAnalyzerMockRecorder is the mock recorder for MockAnalyzer.
type MockAnalyzerMockRecorder struct {
	mock *MockAnalyzer
}

// NewMockAnalyzer creates a new mock instance.
func NewMockAnalyzer(ctrl *gomock.Controller) *MockAnalyzer {
	mock := &MockAnalyzer{ctrl: ctrl}
	mock.recorder = &MockAnalyzerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAnalyzer) EXPECT() *MockAnalyzerMockRecorder {
	return m.recorder
}

// AnalyzeData mocks base method.
func (m *MockAnalyzer) AnalyzeData(data map[string]any) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AnalyzeData", data)
}

// AnalyzeData indicates an expected call of AnalyzeData.
func (mr *MockAnalyzerMockRecorder) AnalyzeData(data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AnalyzeData", reflect.TypeOf((*MockAnalyzer)(nil).AnalyzeData), data)
}

// GetCouchbaseQuery mocks base method.
func (m *MockAnalyzer) GetCouchbaseQuery(bucket, scope, collection string) []common.Index {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCouchbaseQuery", bucket, scope, collection)
	ret0, _ := ret[0].([]common.Index)
	return ret0
}

// GetCouchbaseQuery indicates an expected call of GetCouchbaseQuery.
func (mr *MockAnalyzerMockRecorder) GetCouchbaseQuery(bucket, scope, collection any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCouchbaseQuery", reflect.TypeOf((*MockAnalyzer)(nil).GetCouchbaseQuery), bucket, scope, collection)
}

// Init mocks base method.
func (m *MockAnalyzer) Init(index []mongo.Index, documentKey common.ICBDocumentKey) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Init", index, documentKey)
}

// Init indicates an expected call of Init.
func (mr *MockAnalyzerMockRecorder) Init(index, documentKey any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockAnalyzer)(nil).Init), index, documentKey)
}
