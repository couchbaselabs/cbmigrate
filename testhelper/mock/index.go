// Code generated by MockGen. DO NOT EDIT.
// Source: analyzer.go
//
// Generated by this command:
//
//	mockgen -source=analyzer.go -destination=../../testhelper/mock/index.go -package=mock_test Analyzer
//

// Package mock_test is a generated GoMock package.
package mock_test

import (
	reflect "reflect"

	common "github.com/couchbaselabs/cbmigrate/internal/common"
	gomock "go.uber.org/mock/gomock"
)

// MockAnalyzer is a mock of Analyzer interface.
type MockAnalyzer[T any] struct {
	ctrl     *gomock.Controller
	recorder *MockAnalyzerMockRecorder[T]
}

// MockAnalyzerMockRecorder is the mock recorder for MockAnalyzer.
type MockAnalyzerMockRecorder[T any] struct {
	mock *MockAnalyzer[T]
}

// NewMockAnalyzer creates a new mock instance.
func NewMockAnalyzer[T any](ctrl *gomock.Controller) *MockAnalyzer[T] {
	mock := &MockAnalyzer[T]{ctrl: ctrl}
	mock.recorder = &MockAnalyzerMockRecorder[T]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAnalyzer[T]) EXPECT() *MockAnalyzerMockRecorder[T] {
	return m.recorder
}

// AnalyzeData mocks base method.
func (m *MockAnalyzer[T]) AnalyzeData(data map[string]any) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AnalyzeData", data)
}

// AnalyzeData indicates an expected call of AnalyzeData.
func (mr *MockAnalyzerMockRecorder[T]) AnalyzeData(data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AnalyzeData", reflect.TypeOf((*MockAnalyzer[T])(nil).AnalyzeData), data)
}

// GetCouchbaseQuery mocks base method.
func (m *MockAnalyzer[T]) GetCouchbaseQuery(bucket, scope, collection string) []common.Index {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCouchbaseQuery", bucket, scope, collection)
	ret0, _ := ret[0].([]common.Index)
	return ret0
}

// GetCouchbaseQuery indicates an expected call of GetCouchbaseQuery.
func (mr *MockAnalyzerMockRecorder[T]) GetCouchbaseQuery(bucket, scope, collection any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCouchbaseQuery", reflect.TypeOf((*MockAnalyzer[T])(nil).GetCouchbaseQuery), bucket, scope, collection)
}

// Init mocks base method.
func (m *MockAnalyzer[T]) Init(index []T, suk *common.DocumentKey) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Init", index, suk)
}

// Init indicates an expected call of Init.
func (mr *MockAnalyzerMockRecorder[T]) Init(index, suk any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockAnalyzer[T])(nil).Init), index, suk)
}
