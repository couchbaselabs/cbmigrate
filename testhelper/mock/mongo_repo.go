// Code generated by MockGen. DO NOT EDIT.
// Source: repo.go
//
// Generated by this command:
//
//	mockgen -source=repo.go -destination=../../../testhelper/mock/mongo_repo.go -package=mock_test -mock_names=IRepo=MockMongoIRepo,ICursor=MockMongoICursor IRepo ICursor
//

// Package mock_test is a generated GoMock package.
package mock_test

import (
	context "context"
	reflect "reflect"

	option "github.com/couchbaselabs/cbmigrate/internal/mongo/option"
	repo "github.com/couchbaselabs/cbmigrate/internal/mongo/repo"
	options "go.mongodb.org/mongo-driver/mongo/options"
	gomock "go.uber.org/mock/gomock"
)

// MockMongoIRepo is a mock of IRepo interface.
type MockMongoIRepo struct {
	ctrl     *gomock.Controller
	recorder *MockMongoIRepoMockRecorder
}

// MockMongoIRepoMockRecorder is the mock recorder for MockMongoIRepo.
type MockMongoIRepoMockRecorder struct {
	mock *MockMongoIRepo
}

// NewMockMongoIRepo creates a new mock instance.
func NewMockMongoIRepo(ctrl *gomock.Controller) *MockMongoIRepo {
	mock := &MockMongoIRepo{ctrl: ctrl}
	mock.recorder = &MockMongoIRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMongoIRepo) EXPECT() *MockMongoIRepoMockRecorder {
	return m.recorder
}

// Find mocks base method.
func (m *MockMongoIRepo) Find(collection string, ctx context.Context, filter any, opts ...*options.FindOptions) (repo.ICursor, error) {
	m.ctrl.T.Helper()
	varargs := []any{collection, ctx, filter}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Find", varargs...)
	ret0, _ := ret[0].(repo.ICursor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockMongoIRepoMockRecorder) Find(collection, ctx, filter any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{collection, ctx, filter}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockMongoIRepo)(nil).Find), varargs...)
}

// GetIndexes mocks base method.
func (m *MockMongoIRepo) GetIndexes(ctx context.Context, collection string) ([]repo.Indexes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIndexes", ctx, collection)
	ret0, _ := ret[0].([]repo.Indexes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIndexes indicates an expected call of GetIndexes.
func (mr *MockMongoIRepoMockRecorder) GetIndexes(ctx, collection any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIndexes", reflect.TypeOf((*MockMongoIRepo)(nil).GetIndexes), ctx, collection)
}

// Init mocks base method.
func (m *MockMongoIRepo) Init(opts *option.Options) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init", opts)
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init.
func (mr *MockMongoIRepoMockRecorder) Init(opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockMongoIRepo)(nil).Init), opts)
}

// MockMongoICursor is a mock of ICursor interface.
type MockMongoICursor struct {
	ctrl     *gomock.Controller
	recorder *MockMongoICursorMockRecorder
}

// MockMongoICursorMockRecorder is the mock recorder for MockMongoICursor.
type MockMongoICursorMockRecorder struct {
	mock *MockMongoICursor
}

// NewMockMongoICursor creates a new mock instance.
func NewMockMongoICursor(ctrl *gomock.Controller) *MockMongoICursor {
	mock := &MockMongoICursor{ctrl: ctrl}
	mock.recorder = &MockMongoICursorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMongoICursor) EXPECT() *MockMongoICursorMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockMongoICursor) Close(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockMongoICursorMockRecorder) Close(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockMongoICursor)(nil).Close), ctx)
}

// Decode mocks base method.
func (m *MockMongoICursor) Decode(val any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Decode", val)
	ret0, _ := ret[0].(error)
	return ret0
}

// Decode indicates an expected call of Decode.
func (mr *MockMongoICursorMockRecorder) Decode(val any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decode", reflect.TypeOf((*MockMongoICursor)(nil).Decode), val)
}

// Err mocks base method.
func (m *MockMongoICursor) Err() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Err")
	ret0, _ := ret[0].(error)
	return ret0
}

// Err indicates an expected call of Err.
func (mr *MockMongoICursorMockRecorder) Err() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Err", reflect.TypeOf((*MockMongoICursor)(nil).Err))
}

// Next mocks base method.
func (m *MockMongoICursor) Next(ctx context.Context) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Next", ctx)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Next indicates an expected call of Next.
func (mr *MockMongoICursorMockRecorder) Next(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockMongoICursor)(nil).Next), ctx)
}
