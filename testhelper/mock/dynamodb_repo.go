// Code generated by MockGen. DO NOT EDIT.
// Source: repo.go
//
// Generated by this command:
//
//	mockgen -source=repo.go -destination=../../../testhelper/mock/dynamodb_repo.go -package=mock_test -mock_names=IRepo=MockDynamoDbIRepo,IPaginator=MockDynamoDbIPaginator IRepo IPaginator
//

// Package mock_test is a generated GoMock package.
package mock_test

import (
	context "context"
	reflect "reflect"

	dynamodb "github.com/aws/aws-sdk-go-v2/service/dynamodb"
	option "github.com/couchbaselabs/cbmigrate/internal/dynamodb/option"
	repo "github.com/couchbaselabs/cbmigrate/internal/dynamodb/repo"
	gomock "go.uber.org/mock/gomock"
)

// MockDynamoDbIRepo is a mock of IRepo interface.
type MockDynamoDbIRepo struct {
	ctrl     *gomock.Controller
	recorder *MockDynamoDbIRepoMockRecorder
}

// MockDynamoDbIRepoMockRecorder is the mock recorder for MockDynamoDbIRepo.
type MockDynamoDbIRepoMockRecorder struct {
	mock *MockDynamoDbIRepo
}

// NewMockDynamoDbIRepo creates a new mock instance.
func NewMockDynamoDbIRepo(ctrl *gomock.Controller) *MockDynamoDbIRepo {
	mock := &MockDynamoDbIRepo{ctrl: ctrl}
	mock.recorder = &MockDynamoDbIRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDynamoDbIRepo) EXPECT() *MockDynamoDbIRepoMockRecorder {
	return m.recorder
}

// GetIndexes mocks base method.
func (m *MockDynamoDbIRepo) GetIndexes(ctx context.Context) ([]repo.Index, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIndexes", ctx)
	ret0, _ := ret[0].([]repo.Index)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIndexes indicates an expected call of GetIndexes.
func (mr *MockDynamoDbIRepoMockRecorder) GetIndexes(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIndexes", reflect.TypeOf((*MockDynamoDbIRepo)(nil).GetIndexes), ctx)
}

// GetPrimaryIndex mocks base method.
func (m *MockDynamoDbIRepo) GetPrimaryIndex(ctx context.Context) (repo.Index, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPrimaryIndex", ctx)
	ret0, _ := ret[0].(repo.Index)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPrimaryIndex indicates an expected call of GetPrimaryIndex.
func (mr *MockDynamoDbIRepoMockRecorder) GetPrimaryIndex(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPrimaryIndex", reflect.TypeOf((*MockDynamoDbIRepo)(nil).GetPrimaryIndex), ctx)
}

// Init mocks base method.
func (m *MockDynamoDbIRepo) Init(opts *option.Options) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init", opts)
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init.
func (mr *MockDynamoDbIRepoMockRecorder) Init(opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockDynamoDbIRepo)(nil).Init), opts)
}

// NewPaginator mocks base method.
func (m *MockDynamoDbIRepo) NewPaginator() repo.IPaginator {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewPaginator")
	ret0, _ := ret[0].(repo.IPaginator)
	return ret0
}

// NewPaginator indicates an expected call of NewPaginator.
func (mr *MockDynamoDbIRepoMockRecorder) NewPaginator() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewPaginator", reflect.TypeOf((*MockDynamoDbIRepo)(nil).NewPaginator))
}

// MockDynamoDbIPaginator is a mock of IPaginator interface.
type MockDynamoDbIPaginator struct {
	ctrl     *gomock.Controller
	recorder *MockDynamoDbIPaginatorMockRecorder
}

// MockDynamoDbIPaginatorMockRecorder is the mock recorder for MockDynamoDbIPaginator.
type MockDynamoDbIPaginatorMockRecorder struct {
	mock *MockDynamoDbIPaginator
}

// NewMockDynamoDbIPaginator creates a new mock instance.
func NewMockDynamoDbIPaginator(ctrl *gomock.Controller) *MockDynamoDbIPaginator {
	mock := &MockDynamoDbIPaginator{ctrl: ctrl}
	mock.recorder = &MockDynamoDbIPaginatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDynamoDbIPaginator) EXPECT() *MockDynamoDbIPaginatorMockRecorder {
	return m.recorder
}

// HasMorePages mocks base method.
func (m *MockDynamoDbIPaginator) HasMorePages() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasMorePages")
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasMorePages indicates an expected call of HasMorePages.
func (mr *MockDynamoDbIPaginatorMockRecorder) HasMorePages() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasMorePages", reflect.TypeOf((*MockDynamoDbIPaginator)(nil).HasMorePages))
}

// NextPage mocks base method.
func (m *MockDynamoDbIPaginator) NextPage(ctx context.Context, optFns ...func(*dynamodb.Options)) (*dynamodb.ScanOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NextPage", varargs...)
	ret0, _ := ret[0].(*dynamodb.ScanOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NextPage indicates an expected call of NextPage.
func (mr *MockDynamoDbIPaginatorMockRecorder) NextPage(ctx any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NextPage", reflect.TypeOf((*MockDynamoDbIPaginator)(nil).NextPage), varargs...)
}
