// Code generated by MockGen. DO NOT EDIT.
// Source: migrater.go
//
// Generated by this command:
//
//	mockgen -source=migrater.go -destination=../../testhelper/mock/migrater.go -package=mock IMigrate
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	option "github.com/couchbaselabs/cbmigrate/internal/couchbase/option"
	gomock "go.uber.org/mock/gomock"
)

// MockIMigrate is a mock of IMigrate interface.
type MockIMigrate[Options any] struct {
	ctrl     *gomock.Controller
	recorder *MockIMigrateMockRecorder[Options]
	isgomock struct{}
}

// MockIMigrateMockRecorder is the mock recorder for MockIMigrate.
type MockIMigrateMockRecorder[Options any] struct {
	mock *MockIMigrate[Options]
}

// NewMockIMigrate creates a new mock instance.
func NewMockIMigrate[Options any](ctrl *gomock.Controller) *MockIMigrate[Options] {
	mock := &MockIMigrate[Options]{ctrl: ctrl}
	mock.recorder = &MockIMigrateMockRecorder[Options]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIMigrate[Options]) EXPECT() *MockIMigrateMockRecorder[Options] {
	return m.recorder
}

// Copy mocks base method.
func (m *MockIMigrate[Options]) Copy(mOpts *Options, cbOpts *option.Options, copyIndexes bool, bufferSize int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Copy", mOpts, cbOpts, copyIndexes, bufferSize)
	ret0, _ := ret[0].(error)
	return ret0
}

// Copy indicates an expected call of Copy.
func (mr *MockIMigrateMockRecorder[Options]) Copy(mOpts, cbOpts, copyIndexes, bufferSize any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Copy", reflect.TypeOf((*MockIMigrate[Options])(nil).Copy), mOpts, cbOpts, copyIndexes, bufferSize)
}
